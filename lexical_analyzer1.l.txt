%{
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Symbol table for identifiers
char symbol_table[MAX][50];
int symbol_count = 0;

// Function to add identifier to symbol table if not already present
void add_to_symbol_table(char *id) {
    int i;
    for (i = 0; i < symbol_count; i++) {
        if (strcmp(symbol_table[i], id) == 0)
            return; // Already present
    }
    strcpy(symbol_table[symbol_count], id);
    symbol_count++;
}
%}

%%
"int"|"float"|"char"|"double"|"if"|"else"|"while"|"for"|"return"    { printf("Keyword: %s\n", yytext); }
"/*"([^*]|\*+[^*/])*\*+"/"   { printf("Comment: %s\n", yytext); }
"//".*                       { printf("Comment: %s\n", yytext); }
[0-9]+                       { printf("Constant: %s\n", yytext); }
[0-9]+"."[0-9]+              { printf("Constant: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]*        { printf("Identifier: %s\n", yytext); add_to_symbol_table(yytext); }
"=="|"!="|"<="|">="|"<"|">"|"="|"+"|"-"|"*"|"/"   { printf("Operator: %s\n", yytext); }
[ \t\n]+                     { /* Ignore whitespace */ }
.                            { printf("Other: %s\n", yytext); }
%%

int main() {
    printf("Enter C code (CTRL+D to end input):\n");
    yylex();

    printf("\n--- Symbol Table ---\n");
    for (int i = 0; i < symbol_count; i++) {
        printf("%d: %s\n", i + 1, symbol_table[i]);
    }
    return 0;
}

int yywrap() {
    return 1;
}
